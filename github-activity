#!/usr/bin/env python3

from datetime import datetime
import argparse
import json
import urllib.request
import urllib.error

def main():
    parser = argparse.ArgumentParser(
        prog="github-activity",
        description="Simple CLI github user activity parser")
    
    parser.add_argument("username", help="GitHub username")

    args = parser.parse_args()

    fetch_activity(args.username)

def handle_push(event, repo, repo_url, time_str):
    commits = len(event['payload']['commits'])
    print(f"{time_str} - Pushed {commits} commit{'s' if commits != 1 else ''} to \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_create(event, repo, repo_url, time_str):
    ref = event['payload']['ref_type']
    description = event['payload'].get('description', '')
    print(f"{time_str} - Created {ref}: {description} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_commit_comment(event, repo, repo_url, time_str):
    comment = event['payload']['comment']
    comment_url = comment["html_url"]
    comment_body = comment.get("body", "")[:50]
    print(f"{time_str} - Commented a commit in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

def handle_delete(event, repo, repo_url, time_str):
    ref = event['payload']['ref_type']
    print(f"{time_str} - Deleted {ref} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_issues(event, repo, repo_url, time_str):
    action = event['payload']['action']
    print(f"{time_str} - {action.capitalize()} an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_issue_comment(event, repo, repo_url, time_str):
    comment = event['payload']['comment']
    comment_url = comment["html_url"]
    comment_body = comment.get("body", "")[:50]
    print(f"{time_str} - Commented on an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

def handle_watch(event, repo, repo_url, time_str):
    print(f"{time_str} - Starred \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_fork(event, repo, repo_url, time_str):
    forkee = event['payload']['forkee']['full_name']
    print(f"{time_str} - Forked \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\ to {forkee}")

def handle_pull_request(event, repo, repo_url, time_str):
    action = event['payload']['action']
    print(f"{time_str} - {action.capitalize()} a pull request in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_pull_request_review(event, repo, repo_url, time_str):
    action = event['payload']['action']
    review_url = event['payload']['review']['_links']['html']['href']
    print(f"{time_str} - {action.capitalize()} \033]8;;{review_url}\033\\review\033]8;;\033\\ in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_pull_request_review_comment(event, repo, repo_url, time_str):
    action = event['payload']['action']
    comment = event['payload']['comment']
    comment_url = comment.get("html_url")
    print(f"{time_str} - {action.capitalize()} PR review \033]8;;{comment_url}\033\\comment \033]8;;\033\\in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_pull_request_thread(event, repo, repo_url, time_str):
    payload = event['payload']
    thread = payload['thread']
    pr = payload['pull_request']
    pr_title = pr['title']
    pr_url = pr['html_url']

    comments = thread.get("comments", [])
    comment_url = comments[0].get("html_url") if comments else pr_url
    comment_body = comments[0].get("body", '')[:50] if comments else ''
    action = payload.get('action')
    if action in ["resolved", "unresolved"]:
        print(f"{time_str} - Marked review thread as {action} on PR \033]8;;{pr_url}\033\\{pr_title}\033]8;;\033\\: "
              f"\033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")
    else:
        print(f"{time_str} - Started a review thread on PR \033]8;;{pr_url}\033\\{pr_title}\033]8;;\033\\: "
              f"\033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

def handle_gollum(event, repo, repo_url, time_str):
    page = event['payload']['pages'][0]
    action = page.get("action", "updated").capitalize()
    page_name = page['page_name']
    page_url = page['html_url']
    print(f"{time_str} - {action} wiki page for \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{page_url}\033\\{page_name}\033]8;;\033\\")

def handle_member(event, repo, repo_url, time_str):
    action = event['payload']['action']
    member = event['payload']['member']['login']
    
    if action == "edited":
        old_perm = event['payload']['changes']['old_permission']['from']
        print(f"{time_str} - Edited {member}'s permission from {old_perm} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")
    else:
        print(f"{time_str} - {action.capitalize()} {member} to \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_public(repo, repo_url, time_str):
    print(f"{time_str} -\033]8;;{repo_url}\033\\{repo}\033]8;;\033\\ was made public")

def handle_release(event, repo, repo_url, time_str):
    payload = event['payload']
    action = payload.get('action', 'published')
    release = payload.get('release', {})
    name = release.get('name') or release.get('tag_name', 'unknown')
    html_url = release.get('html_url', repo_url)

    print(
        f"{time_str} - {action.capitalize()} release \033]8;;{html_url}\033\\{name}\033]8;;\033\\ in "
        f"\033]8;;{repo_url}\033\\{repo}\033]8;;\033\\"
    )

def handle_sponsorship(event, repo, repo_url, time_str):
    payload = event['payload']
    action = payload.get('action', 'created')  
    sponsor = payload.get('sponsorship', {}).get('sponsor', {}).get('login', 'someone')

    print(f"{time_str} - {action.capitalize()} sponsorship from {sponsor}")

def handle_default(event, repo, repo_url, time_str):
    type_ = event['type']
    print(f"{time_str} - {type_} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

   
def fetch_activity(username):
    event_handlers = {
    "PushEvent": handle_push,
    "CreateEvent": handle_create,
    "CommitCommentEvent": handle_commit_comment,
    "DeleteEvent": handle_delete,
    "IssuesEvent": handle_issues,
    "IssueCommentEvent": handle_issue_comment,
    "WatchEvent": handle_watch,
    "ForkEvent": handle_fork,
    "PullRequestEvent": handle_pull_request,
    "PullRequestReviewEvent": handle_pull_request_review,
    "PullRequestReviewThreadEvent": handle_pull_request_thread,
    "PullRequestReviewCommentEvent": handle_pull_request_review_comment,
    "GollumEvent": handle_gollum,
    "MemberEvent": handle_member,
    "PublicEvent": handle_public,
    "ReleaseEvent": handle_release,
    "SponsorshipEvent": handle_sponsorship
}
    
    url = f"https://api.github.com/users/{username}/events"
    req = urllib.request.Request(url, headers={"User-Agent": "Python"})

    try:
        with urllib.request.urlopen(req) as response:
            data = response.read().decode()
            events = json.loads(data)

        if not events:
            print("This user has no activity for the past 90 days")
            return

        for event in events:
            repo = event['repo']['name']
            repo_url = f"https://github.com/{repo}"
            type_ = event['type']
            time = datetime.strptime(event["created_at"], "%Y-%m-%dT%H:%M:%SZ")
            time_str = time.strftime("%Y-%m-%d %H:%M")

            handler = event_handlers.get(type_, handle_default)
            handler(event, repo, repo_url, time_str)

    except urllib.error.HTTPError as e:
        if e.code == 404:
            print("User not found")
        elif e.code == 403:
            print("Access denied or API limit reached")
        else:
            print(f"HTTP error:{e.code}: {e.reason}")

    except urllib.error.URLError as e:
        print(f"Connection error {e.reason}")
    except json.JSONDecodeError:
        print("JSON Decode Error")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()