#!/usr/bin/env python3

import argparse
import json
import urllib.request
import urllib.error

def main():
    parser = argparse.ArgumentParser(
        prog="github-activity",
        description="Simple CLI github user activity parser")
    
    parser.add_argument("username", help="GitHub username")

    args = parser.parse_args()

    fetch_activity(args.username)

def fetch_activity(username):
    
    url = f"https://api.github.com/users/{username}/events"
    req = urllib.request.Request(url, headers={"User-Agent": "Python"})
    
    try:
        with urllib.request.urlopen(req) as response:
            data = response.read().decode()
            events = json.loads(data)

        if not events:
            print("This user has no activity for the past 90 days")
    
        for event in events:
            repo = event['repo']['name']
            repo_url = f"https://github.com/{repo}"
            type_ = event['type']

            if type_ == "PushEvent":
                commits = len(event['payload']['commits'])
                print(f"- Pushed {commits} commit{'s' if commits != 1 else ''} to \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            elif type_ == "CreateEvent":
                ref = event['payload']['ref_type']
                description = event['payload']['description']
                print(f"- Created {ref}: {description} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            elif type_ == "CommitCommentEvent":
                comment = event['payload']['comment']
                comment_url = comment["html_url"]
                comment_body = comment.get("body", "")[:50]

                print(
                f"- Commented a commit in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: "
                f"\033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\"
                )

            elif type_ == "DeleteEvent":
                ref = event['payload']['ref_type']
                print(f"- Deleted {ref} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            elif type_ == "IssuesEvent":
                action = event['payload']['action']
                print(f"- {action.capitalize()} an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            elif type_ == "IssueCommentEvent":
                comment = event['payload']['comment']
                comment_url = comment["html_url"]
                comment_body = comment.get("body", "")[:50]
                print(f"- Commented on an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: "
                f"\033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

            elif type_ == "WatchEvent":
                print(f"- Starred \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            elif type_ == "ForkEvent":
                print(f"- Forked \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\ to {event['payload']['forkee']['full_name']}")

            elif type_ == "PullRequestEvent":
                action = event['payload']['action']
                print(f"- {action.capitalize()} a pull request in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

            else:
                print(f"- {type_} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

    except urllib.error.HTTPError as e:
        if e.code == 404:
            print("User not found")
        elif e.code == 403:
            print("Access denied or API limit reached")
        else:
            print(f"HTTP error:{e.code}: {e.reason}")

    except urllib.error.URLError as e:
        print(f"Connection error {e.reason}")
    except json.JSONDecodeError:
        print("JSON Decode Error")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()