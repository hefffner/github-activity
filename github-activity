#!/usr/bin/env python3

import argparse
import json
import urllib.request
import urllib.error



def main():
    parser = argparse.ArgumentParser(
        prog="github-activity",
        description="Simple CLI github user activity parser")
    
    parser.add_argument("username", help="GitHub username")

    args = parser.parse_args()

    fetch_activity(args.username)

    

def handle_push(event, repo, repo_url):
    commits = len(event['payload']['commits'])
    print(f"- Pushed {commits} commit{'s' if commits != 1 else ''} to \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_create(event, repo, repo_url):
    ref = event['payload']['ref_type']
    description = event['payload'].get('description', '')
    print(f"- Created {ref}: {description} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_commit_comment(event, repo, repo_url):
    comment = event['payload']['comment']
    comment_url = comment["html_url"]
    comment_body = comment.get("body", "")[:50]
    print(f"- Commented a commit in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

def handle_delete(event, repo, repo_url):
    ref = event['payload']['ref_type']
    print(f"- Deleted {ref} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_issues(event, repo, repo_url):
    action = event['payload']['action']
    print(f"- {action.capitalize()} an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_issue_comment(event, repo, repo_url):
    comment = event['payload']['comment']
    comment_url = comment["html_url"]
    comment_body = comment.get("body", "")[:50]
    print(f"- Commented on an issue in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{comment_url}\033\\{comment_body}\033]8;;\033\\")

def handle_watch(event, repo, repo_url):
    print(f"- Starred \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_fork(event, repo, repo_url):
    forkee = event['payload']['forkee']['full_name']
    print(f"- Forked \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\ to {forkee}")

def handle_pull_request(event, repo, repo_url):
    action = event['payload']['action']
    print(f"- {action.capitalize()} a pull request in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

def handle_gollum(event, repo, repo_url):
    page = event['payload']['pages'][0]
    action = page.get("action", "updated").capitalize()
    page_name = page['page_name']
    page_url = page['html_url']
    print(f"- {action} wiki page for \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\: \033]8;;{page_url}\033\\{page_name}\033]8;;\033\\")

def handle_default(event, repo, repo_url):
    type_ = event['type']
    print(f"- {type_} in \033]8;;{repo_url}\033\\{repo}\033]8;;\033\\")

   
def fetch_activity(username):
    event_handlers = {
    "PushEvent": handle_push,
    "CreateEvent": handle_create,
    "CommitCommentEvent": handle_commit_comment,
    "DeleteEvent": handle_delete,
    "IssuesEvent": handle_issues,
    "IssueCommentEvent": handle_issue_comment,
    "WatchEvent": handle_watch,
    "ForkEvent": handle_fork,
    "PullRequestEvent": handle_pull_request,
    "GollumEvent": handle_gollum
}
    
    url = f"https://api.github.com/users/{username}/events"
    req = urllib.request.Request(url, headers={"User-Agent": "Python"})

    try:
        with urllib.request.urlopen(req) as response:
            data = response.read().decode()
            events = json.loads(data)

        if not events:
            print("This user has no activity for the past 90 days")
            return

        for event in events:
            repo = event['repo']['name']
            repo_url = f"https://github.com/{repo}"
            type_ = event['type']

            handler = event_handlers.get(type_, handle_default)
            handler(event, repo, repo_url)

    except urllib.error.HTTPError as e:
        if e.code == 404:
            print("User not found")
        elif e.code == 403:
            print("Access denied or API limit reached")
        else:
            print(f"HTTP error:{e.code}: {e.reason}")

    except urllib.error.URLError as e:
        print(f"Connection error {e.reason}")
    except json.JSONDecodeError:
        print("JSON Decode Error")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()